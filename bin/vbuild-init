#!/usr/bin/env node
const fs = require('fs')
const path = require('path')
const chalk = require('chalk')
const meow = require('meow')
const kopy = require('kopy')
const $ = require('shelljs')
const tildify = require('tildify')
const install = require('yarn-install')
const _ = require('../lib/utils')

const cli = meow(`
  ${chalk.bold('Options:')}

    ${chalk.yellow('--force, -f')}      ${chalk.dim('Override existing folder')}
    ${chalk.yellow('--component')}      ${chalk.dim('Generate a component template')}
    ${chalk.yellow('--electron')}       ${chalk.dim('Generate an Electron app')}
    ${chalk.yellow('--no-prompts')}     ${chalk.dim('Skip prompts and use default value with CLI options')}
    ${chalk.yellow('--help, -h')}       ${chalk.dim('Output help (You are here!)')}
    ${chalk.yellow('--version, -v')}    ${chalk.dim('Output version')}
\t`, {
  alias: {
    h: 'help',
    v: 'version',
    f: 'force'
  }
})

const name = cli.input[0]

if (!name) {
  console.error(chalk.red('> A folder name is required to perform this action!'))
  process.exit(1)
}

const dest = _.cwd(name)
if (!cli.flags.force && fs.existsSync(dest)) {
  console.error(chalk.red(`${chalk.yellow(tildify(dest))} already exists, you can use \`--force\` option to override it`))
  process.exit(1)
}

const defaults = Object.assign({
  name,
  electron: false,
  component: false,
  moduleName: ''
}, cli.flags)

const prompts = [
  {
    name: 'name',
    default: defaults.name,
    message: 'Choose a name for your new project:'
  },
  {
    name: 'electron',
    default: defaults.electron,
    message: 'Is it an Electron app?',
    type: 'confirm'
  },
  {
    name: 'component',
    default: defaults.component,
    message: 'Is it a component?',
    type: 'confirm',
    when: answers => !answers.electron,
  },
  {
    name: 'moduleName',
    message: `What's the exported module name of the component? (in umd format)`,
    when: answers => answers.component,
    default(answers) {
      return answers.name.replace(/[-_.]([\w])/, (_, p1) => p1.toUpperCase())
    }
  }
]

const options = {
  filters: {
    'app/**': 'electron',
    'src-normal/**': '!component',
    'src-component/**': 'component',
    'example/**': 'component',
    'vbuild.config.js': '!component',
    'vbuild.{example,component}.js': 'component'
  }
}

if (cli.flags.prompts === false) {
  console.log('> Skipping prompts (using default value)')
  options.data = defaults
} else {
  options.prompts = prompts
  options.data = defaults
}

kopy(_.ownDir('template'), dest, options).then(({files, merged}) => {
  console.log()
  for (const file of files) {
    console.log(`${chalk.green('Generating')} · ${file}`)
  }
  for (const file of ['gitignore', 'editorconfig']) {
    move(dest, file, `.${file}`)
  }
  if (merged.component) {
    move(dest, 'src-component', 'src')
    move(dest, 'src/Component.vue', `src/${merged.moduleName}.vue`)
  } else {
    move(dest, 'src-normal', 'src')
  }

  console.log('\n> Installing vbuild in project:\n')
  install({cwd: dest})

  console.log(`\n${chalk.bgGreen.black(' DONE ')} Successfully generated into ${chalk.yellow(tildify(dest))}!\n`)

  console.log(chalk.green('- To get started:'))
  console.log(`\n  cd ${name}`)
  if (merged.component) {
    console.log('  yarn example\n')
  } else {
    console.log('  yarn dev\n')
  }
  if (merged.electron) {
    console.log(chalk.green('- In another tab:\n'))
    console.log('  yarn app\n')
  }

  if (merged.component) {
    console.log(chalk.green('- To deploy example:'))
    console.log(`\n  yarn deploy ${chalk.dim('# build and push to gh-pages')}\n`)
    console.log(chalk.green('- To distribute component:'))
    console.log(`\n  yarn build:cjs  ${chalk.dim('# commonjs format')}`)
    console.log(`  yarn build:umd  ${chalk.dim('# umd format')}`)
    console.log(`  yarn build      ${chalk.dim('# both format')}\n`)
  } else {
    console.log(chalk.green('- To build for production:'))
    console.log('\n  yarn build\n')
  }

  console.log(chalk.dim(`For more usage, please view ${merged.name}/README.md\n`))
}).catch(console.error)

function move(dir, from, to) {
  console.log(`${chalk.magenta('Moving    ')} · ${from} -> ${to}`)
  const dest = path.join(dir, to)
  $.rm('-rf', dest)
  $.mv(path.join(dir, from), dest)
}
